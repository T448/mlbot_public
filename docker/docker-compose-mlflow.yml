services:
  mlflow:
    build: ./mlflow
    image: mlflow
    container_name: mlflow_tracking_server
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      S3_BUCKET: minio/${AWS_BUCKET_NAME}
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_REGION}
      VIRTUAL_HOST: ${VIRTUAL_HOST}
    expose:
      - 80
    entrypoint: >
      mlflow server 
      --backend-store-uri postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB} 
      --default-artifact-root s3://${AWS_BUCKET_NAME}/ 
      --artifacts-destination s3://${AWS_BUCKET_NAME}/ 
      -h 0.0.0.0 
      --port 80 
      --serve-artifacts
    depends_on:
      wait-for-db:
        condition: service_completed_successfully

  s3:
    image: minio/minio:RELEASE.2023-11-01T18-37-25Z
    restart: unless-stopped
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data

  create-s3-bckests:
    image: minio/mc
    depends_on:
      - s3
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://s3:9000 '${AWS_ACCESS_KEY_ID}' '${AWS_SECRET_ACCESS_KEY}') do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/${AWS_BUCKET_NAME};
      /usr/bin/mc anonymous set public minio/${AWS_BUCKET_NAME};
      exit 0;
      "

  postgres:
    image: postgres:16.2-bullseye
    restart: unless-stopped
    container_name: postgres
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    hostname: ${POSTGRES_HOST}
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres-db:/var/lib/postgresql/data

  wait-for-db:
    image: atkrad/wait4x
    command: tcp ${POSTGRES_HOST}:${POSTGRES_PORT} -t 90s -i 250ms
    depends_on:
      - postgres

  nginx-proxy:
    image: jwilder/nginx-proxy
    restart: unless-stopped
    ports:
      - "5000:80"
    volumes:
      - ./nginx/htpasswd:/etc/nginx/htpasswd
      - ./nginx/certs/:/etc/nginx/certs
      - ./nginx/conf.d/proxy.conf:/etc/nginx/conf.d/proxy.conf
      - /var/run/docker.sock:/tmp/docker.sock:ro

volumes:
  postgres-db:
  minio-data:
